{
  "version": 3,
  "sources": ["../../../src/contexts/GasContext/GasContext.d.ts"],
  "sourcesContent": ["import React, { ChangeEvent, ReactNode } from 'react';\nimport { SendFormContainerPropsType } from 'containers/SendFormContainer';\nexport interface GasContextPropsType {\n    gasPrice: string;\n    gasLimit: string;\n    gasCostLoading: boolean;\n    gasCostError?: string | null;\n    hasErrors: boolean;\n    isGasLimitInvalid: boolean;\n    isGasPriceInvalid: boolean;\n    gasPriceError?: string;\n    gasLimitError?: string;\n    defaultGasLimit: string;\n    feeLimit: string;\n    onChangeGasPrice: (newValue: string | ChangeEvent<any>, shouldValidate?: boolean) => void;\n    onChangeGasLimit: (newValue: string | ChangeEvent<any>, shouldValidate?: boolean) => void;\n    onBlurGasPrice: () => void;\n    onBlurGasLimit: () => void;\n    onResetGasPrice: () => void;\n    onResetGasLimit: () => void;\n}\ninterface GasContextProviderPropsType {\n    children: ReactNode;\n    initGasLimitError?: SendFormContainerPropsType['initGasLimitError'];\n}\nexport declare const GasContext: React.Context<GasContextPropsType>;\n/**\n * **initGasLimitError**: Value coming from an intial compute of gasLimit in case the form is configured for a smart contract transaction\n */\n/**\n * **initGasLimitError**: Value coming from an intial compute of gasLimit in case the form is configured for a smart contract transaction\n */\nexport declare function GasContextProvider({ children, initGasLimitError }: GasContextProviderPropsType): React.JSX.Element;\nexport declare function useGasContext(): GasContextPropsType;\nexport {};\n//# sourceMappingURL=GasContext.d.ts.map"],
  "mappings": "oEAAA",
  "names": []
}
