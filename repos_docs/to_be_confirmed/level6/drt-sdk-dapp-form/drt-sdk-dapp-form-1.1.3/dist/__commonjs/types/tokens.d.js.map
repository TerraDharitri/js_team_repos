{
  "version": 3,
  "sources": ["../../../src/__commonjs/types/tokens.d.ts"],
  "sourcesContent": ["import { TokenType, NftType as NftInterface } from '@terradharitri/sdk-dapp/types/tokens.types';\nimport { NftEnumType, TransactionTypeEnum } from 'types/enums';\nexport type PartialTokenType = {\n    identifier: TokenType['identifier'];\n    name: TokenType['name'];\n    decimals: number;\n    balance: string;\n    ticker: TokenType['ticker'];\n    assets?: TokenAssetsType;\n};\nexport interface SelectedTokenType extends PartialTokenType {\n    type: TransactionTypeEnum;\n}\nexport type TokenAssetsType = TokenType['assets'];\ninterface SharedNftType {\n    balance: NftInterface['balance'];\n    identifier: NftInterface['identifier'];\n    decimals: NftInterface['decimals'];\n    name: NftInterface['name'];\n    nonce: NftInterface['nonce'];\n    creator: NftInterface['creator'];\n    scamInfo?: NftInterface['scamInfo'];\n    uris?: NftInterface['uris'];\n    media?: NftInterface['media'];\n    /**\n     * Custom internal proprety based on collection roles.\n     *\n     * If set, warning is shown and `MetaDcdt` transfer is only allowed to listed accounts\n     */\n    allowedReceivers?: string[] | null;\n}\ntype SharedTokenType = PartialTokenType & {\n    owner: string;\n};\nexport type PartialNftType = SharedTokenType & SharedNftType & {\n    type: NftEnumType;\n    collection: string;\n    assets?: TokenAssetsType;\n};\nexport type PartialMetaDcdtType = SharedTokenType & SharedNftType & {\n    type: NftEnumType.MetaDCDT;\n    collection: string;\n    assets?: TokenAssetsType;\n};\nexport {};\n//# sourceMappingURL=tokens.d.ts.map"],
  "mappings": "oEAAA",
  "names": []
}
