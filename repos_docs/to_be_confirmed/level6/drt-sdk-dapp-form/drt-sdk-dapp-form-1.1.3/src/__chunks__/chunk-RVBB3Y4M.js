import{a as y}from"./chunk-VWBUNLER.js";import{a as V}from"./chunk-HPSRXVBY.js";import{a as T}from"./chunk-T2QIQ473.js";import{a as I}from"./chunk-TIBVFBJN.js";import{a as k}from"./chunk-NFS5TQDY.js";import{a as P}from"./chunk-PVV7Q7PA.js";import{a as f}from"./chunk-OLQUPYTS.js";import{a as u,b as g,g as p,i as d}from"./chunk-SVQK3TVL.js";d();import{getIdentifierType as F}from"@terradharitri/sdk-dapp/utils/validation/getIdentifierType";function b(){let t=new URLSearchParams(window.location.search);return Object.fromEntries(t).token}function K(t){return p(this,null,function*(){let{address:r,rewaLabel:o,configValues:{receiver:s,receiverUsername:G,amount:m,gasPrice:L,data:c,tokenId:h},networkConfig:l}=t,C=b(),i=h||C,a=i||o;l&&f(l);let[e,n,E]=yield Promise.all([y({data:c,address:r,identifier:i}),V({identifier:i,address:r}),k(g(u({},t),{computedTokenId:a}))]),{initGasLimit:w,initGasLimitError:R}=E,S={receiver:s,receiverUsername:G,amount:T({computedNft:e,amount:m}),tokenId:a,gasLimit:w,gasPrice:P(L),data:I({computedNft:e,data:c,receiver:s,amount:m})},{isDcdt:v}=F(i);return{initialValues:S,nft:e==null?void 0:e.nft,gasLimitCostError:R,computedTokens:n?[n]:[],computedTokenId:a,tokenFound:v?Boolean(n):!0}})}export{K as a};
//# sourceMappingURL=chunk-RVBB3Y4M.js.map
