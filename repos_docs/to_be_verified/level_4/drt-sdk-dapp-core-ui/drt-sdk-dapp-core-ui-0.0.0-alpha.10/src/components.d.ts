/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IconDefinition } from "@fortawesome/free-solid-svg-icons";
import { CustomToastType, IComponentToast, ISimpleToast } from "./components/functional/toasts-list/components/transaction-toast/transaction-toast.type";
import { IGenericModalProps } from "./common/generic-modal/generic-modal.types";
import { IAccountScreenData, IConfirmScreenData, IConnectScreenData, ILedgerConnectPanelData } from "./components/functional/ledger-connect-components/ledger-connect.types";
import { IEventBus } from "./utils/EventBus";
import { IPendingTransactionsPanelData } from "./components/functional/pending-transactions-panel/pending-transactions-panel.types";
import { ProviderTypeEnum } from "./types/provider.types";
import { SidePanelSideEnum } from "./components/visual/side-panel/side-panel.types";
import { LocalJSX as JSX, VNode } from "@stencil/core";
import { ISignTransactionsPanelData } from "./components/functional/sign-transactions-panel/sign-transactions-panel.types";
import { CustomToastType as CustomToastType1, IToastDataState, ITransactionProgressState, ITransactionToast } from "./components/functional/toasts-list/components/transaction-toast/transaction-toast.type";
import { ITransactionAccount, ITransactionIconInfo, ITransactionsTableRow } from "./components/controlled/transactions-table/transactions-table.type";
import { ITransactionListItem } from "./components/visual/transaction-list-item/transaction-list-item.types";
import { ITransactionListItem as ITransactionListItem1 } from "./components/visual/transaction-list-item/transaction-list-item.types";
import { ITransactionValue } from "./components/controlled/transactions-table/transactions-table.type";
import { IWalletConnectPanelData } from "./components/functional/wallet-connect-components/wallet-connect-panel.types";
export { IconDefinition } from "@fortawesome/free-solid-svg-icons";
export { CustomToastType, IComponentToast, ISimpleToast } from "./components/functional/toasts-list/components/transaction-toast/transaction-toast.type";
export { IGenericModalProps } from "./common/generic-modal/generic-modal.types";
export { IAccountScreenData, IConfirmScreenData, IConnectScreenData, ILedgerConnectPanelData } from "./components/functional/ledger-connect-components/ledger-connect.types";
export { IEventBus } from "./utils/EventBus";
export { IPendingTransactionsPanelData } from "./components/functional/pending-transactions-panel/pending-transactions-panel.types";
export { ProviderTypeEnum } from "./types/provider.types";
export { SidePanelSideEnum } from "./components/visual/side-panel/side-panel.types";
export { LocalJSX as JSX, VNode } from "@stencil/core";
export { ISignTransactionsPanelData } from "./components/functional/sign-transactions-panel/sign-transactions-panel.types";
export { CustomToastType as CustomToastType1, IToastDataState, ITransactionProgressState, ITransactionToast } from "./components/functional/toasts-list/components/transaction-toast/transaction-toast.type";
export { ITransactionAccount, ITransactionIconInfo, ITransactionsTableRow } from "./components/controlled/transactions-table/transactions-table.type";
export { ITransactionListItem } from "./components/visual/transaction-list-item/transaction-list-item.types";
export { ITransactionListItem as ITransactionListItem1 } from "./components/visual/transaction-list-item/transaction-list-item.types";
export { ITransactionValue } from "./components/controlled/transactions-table/transactions-table.type";
export { IWalletConnectPanelData } from "./components/functional/wallet-connect-components/wallet-connect-panel.types";
export namespace Components {
    interface DrtBalanceComponent {
        "amount": string;
        "header"?: string;
        "ticker": string;
        "usdValue"?: string;
    }
    interface DrtCopyButton {
        "class"?: string;
        "copyIcon"?: IconDefinition;
        "iconClass"?: string;
        "successIcon"?: IconDefinition;
        "text": string;
    }
    interface DrtCustomToast {
        "toast": IComponentToast;
    }
    interface DrtExplorerLink {
        "class"?: string;
        "dataTestId"?: string;
        "icon"?: IconDefinition;
        "iconClass"?: string;
        "link": string;
        "text"?: string;
    }
    interface DrtFaIcon {
        "class"?: string;
        "description"?: string;
        "icon": IconDefinition | string;
    }
    interface DrtFormatAmount {
        "class"?: string;
        "dataTestId"?: string;
        "isValid": boolean;
        "label"?: string;
        "labelClass"?: string;
        "showLabel"?: boolean;
        "valueDecimal": string;
        "valueInteger": string;
    }
    interface DrtFungibleComponent {
    }
    interface DrtGenericModal {
        "body": IGenericModalProps['body'];
        "modalSubtitle"?: IGenericModalProps['modalSubtitle'];
        "modalTitle": IGenericModalProps['modalTitle'];
    }
    interface DrtGenericSpinner {
    }
    interface DrtGenericToast {
        "toast": CustomToastType;
    }
    interface DrtLedgerAccountScreen {
        "accountScreenData": IAccountScreenData;
        "selectedIndex": number;
    }
    interface DrtLedgerConfirmScreen {
        "confirmScreenData": IConfirmScreenData;
    }
    interface DrtLedgerConnect {
        "data": ILedgerConnectPanelData;
        "getEventBus": () => Promise<IEventBus>;
    }
    interface DrtLedgerConnectPanel {
        "data": ILedgerConnectPanelData;
        "getEventBus": () => Promise<IEventBus>;
    }
    interface DrtLedgerConnectScreen {
        "connectScreenData": IConnectScreenData;
    }
    interface DrtNotificationsFeed {
        "getEventBus": () => Promise<IEventBus>;
    }
    interface DrtPendingTransactionsPanel {
        "data": IPendingTransactionsPanelData;
        "getEventBus": () => Promise<IEventBus>;
    }
    interface DrtProviderButton {
        "type": ProviderTypeEnum;
    }
    interface DrtSidePanel {
        "isOpen": boolean;
        "panelClassName"?: string;
        "side": SidePanelSideEnum;
    }
    interface DrtSignTransactionComponent {
        "header": VNode;
    }
    interface DrtSignTransactionsPanel {
        "data": ISignTransactionsPanelData;
        "getEventBus": () => Promise<IEventBus>;
    }
    interface DrtSimpleToast {
        "toast": ISimpleToast;
    }
    interface DrtToastList {
        "customToasts": CustomToastType1[];
        "getEventBus": () => Promise<IEventBus>;
        "transactionToasts": ITransactionToast[];
    }
    interface DrtTokenComponent {
    }
    interface DrtTransactionAccount {
        "account": ITransactionAccount;
        "class"?: string;
        "dataTestId"?: string;
        "scope": 'receiver' | 'sender';
        "showLockedAccounts": boolean;
    }
    interface DrtTransactionAccountName {
        "address": string;
        "class"?: string;
        "dataTestId"?: string;
        "description": string;
        "name"?: string;
    }
    interface DrtTransactionAge {
        "age": string;
        "class"?: string;
        "tooltip"?: string;
    }
    interface DrtTransactionDirectionBadge {
        "class"?: string;
        "direction": string;
    }
    interface DrtTransactionFeeComponent {
    }
    interface DrtTransactionHash {
        "class"?: string;
        "transaction": ITransactionsTableRow;
    }
    interface DrtTransactionIcon {
        "class"?: string;
        "iconInfo": ITransactionIconInfo;
    }
    interface DrtTransactionListItem {
        "transaction": ITransactionListItem;
    }
    interface DrtTransactionMethod {
        "actionDescription": string;
        "class"?: string;
        "method": string;
    }
    interface DrtTransactionShards {
        "class"?: string;
        "transaction": ITransactionsTableRow;
    }
    interface DrtTransactionToast {
        "fullWidth"?: boolean;
        "processedTransactionsStatus": string | JSX.Element;
        "toastDataState": IToastDataState;
        "toastId": string;
        "transactionProgressState"?: ITransactionProgressState;
        "transactions": ITransactionListItem[];
        "wrapperClass": string;
    }
    interface DrtTransactionToastContent {
        "fullWidth"?: boolean;
        "processedTransactionsStatus"?: string | JSX.Element;
        "toastDataState": IToastDataState;
        "transactions": ITransactionListItem[];
    }
    interface DrtTransactionToastDetails {
        "maxShownTransactions": number;
        "processedTransactionsStatus"?: string | JSX.Element;
        "transactionClass": string;
        "transactions"?: ITransactionListItem[];
    }
    interface DrtTransactionToastDetailsBody {
        "hash": string;
        "index": string;
        "link": string;
        "status"?: string;
        "transactionClass"?: string;
    }
    interface DrtTransactionToastProgress {
        "endTime"?: number;
        "startTime"?: number;
    }
    interface DrtTransactionValue {
        "class"?: string;
        "value": ITransactionValue;
    }
    interface DrtTransactionsTable {
        "class"?: string;
        "transactions": ITransactionsTableRow[];
    }
    interface DrtTrimText {
        "class"?: string;
        "dataTestId"?: string;
        "text": string;
    }
    interface DrtUnlockButton {
        "icon": HTMLElement;
        "label": string;
    }
    interface DrtUnlockHeader {
        "backIcon"?: IconDefinition;
        "closeIcon": IconDefinition;
        "text": string;
    }
    interface DrtUnlockPanel {
        "allowedProviders"?: ProviderTypeEnum[];
        "isOpen": boolean;
    }
    interface DrtWalletConnect {
        "data": IWalletConnectPanelData;
        "getEventBus": () => Promise<IEventBus>;
    }
    interface DrtWalletConnectBody {
        "description": string;
        "qrCodeSvg": string;
    }
    interface DrtWalletConnectPanel {
        "data": IWalletConnectPanelData;
        "getEventBus": () => Promise<IEventBus>;
    }
}
export interface DrtCustomToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDrtCustomToastElement;
}
export interface DrtGenericModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDrtGenericModalElement;
}
export interface DrtGenericToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDrtGenericToastElement;
}
export interface DrtLedgerAccountScreenCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDrtLedgerAccountScreenElement;
}
export interface DrtLedgerConnectScreenCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDrtLedgerConnectScreenElement;
}
export interface DrtSidePanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDrtSidePanelElement;
}
export interface DrtSimpleToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDrtSimpleToastElement;
}
export interface DrtTransactionToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDrtTransactionToastElement;
}
export interface DrtTransactionToastContentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDrtTransactionToastContentElement;
}
export interface DrtUnlockHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDrtUnlockHeaderElement;
}
export interface DrtUnlockPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDrtUnlockPanelElement;
}
declare global {
    interface HTMLDrtBalanceComponentElement extends Components.DrtBalanceComponent, HTMLStencilElement {
    }
    var HTMLDrtBalanceComponentElement: {
        prototype: HTMLDrtBalanceComponentElement;
        new (): HTMLDrtBalanceComponentElement;
    };
    interface HTMLDrtCopyButtonElement extends Components.DrtCopyButton, HTMLStencilElement {
    }
    var HTMLDrtCopyButtonElement: {
        prototype: HTMLDrtCopyButtonElement;
        new (): HTMLDrtCopyButtonElement;
    };
    interface HTMLDrtCustomToastElementEventMap {
        "deleteToast": string;
    }
    interface HTMLDrtCustomToastElement extends Components.DrtCustomToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDrtCustomToastElementEventMap>(type: K, listener: (this: HTMLDrtCustomToastElement, ev: DrtCustomToastCustomEvent<HTMLDrtCustomToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDrtCustomToastElementEventMap>(type: K, listener: (this: HTMLDrtCustomToastElement, ev: DrtCustomToastCustomEvent<HTMLDrtCustomToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDrtCustomToastElement: {
        prototype: HTMLDrtCustomToastElement;
        new (): HTMLDrtCustomToastElement;
    };
    interface HTMLDrtExplorerLinkElement extends Components.DrtExplorerLink, HTMLStencilElement {
    }
    var HTMLDrtExplorerLinkElement: {
        prototype: HTMLDrtExplorerLinkElement;
        new (): HTMLDrtExplorerLinkElement;
    };
    interface HTMLDrtFaIconElement extends Components.DrtFaIcon, HTMLStencilElement {
    }
    var HTMLDrtFaIconElement: {
        prototype: HTMLDrtFaIconElement;
        new (): HTMLDrtFaIconElement;
    };
    interface HTMLDrtFormatAmountElement extends Components.DrtFormatAmount, HTMLStencilElement {
    }
    var HTMLDrtFormatAmountElement: {
        prototype: HTMLDrtFormatAmountElement;
        new (): HTMLDrtFormatAmountElement;
    };
    interface HTMLDrtFungibleComponentElement extends Components.DrtFungibleComponent, HTMLStencilElement {
    }
    var HTMLDrtFungibleComponentElement: {
        prototype: HTMLDrtFungibleComponentElement;
        new (): HTMLDrtFungibleComponentElement;
    };
    interface HTMLDrtGenericModalElementEventMap {
        "close": any;
    }
    interface HTMLDrtGenericModalElement extends Components.DrtGenericModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDrtGenericModalElementEventMap>(type: K, listener: (this: HTMLDrtGenericModalElement, ev: DrtGenericModalCustomEvent<HTMLDrtGenericModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDrtGenericModalElementEventMap>(type: K, listener: (this: HTMLDrtGenericModalElement, ev: DrtGenericModalCustomEvent<HTMLDrtGenericModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDrtGenericModalElement: {
        prototype: HTMLDrtGenericModalElement;
        new (): HTMLDrtGenericModalElement;
    };
    interface HTMLDrtGenericSpinnerElement extends Components.DrtGenericSpinner, HTMLStencilElement {
    }
    var HTMLDrtGenericSpinnerElement: {
        prototype: HTMLDrtGenericSpinnerElement;
        new (): HTMLDrtGenericSpinnerElement;
    };
    interface HTMLDrtGenericToastElementEventMap {
        "deleteToast": string;
    }
    interface HTMLDrtGenericToastElement extends Components.DrtGenericToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDrtGenericToastElementEventMap>(type: K, listener: (this: HTMLDrtGenericToastElement, ev: DrtGenericToastCustomEvent<HTMLDrtGenericToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDrtGenericToastElementEventMap>(type: K, listener: (this: HTMLDrtGenericToastElement, ev: DrtGenericToastCustomEvent<HTMLDrtGenericToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDrtGenericToastElement: {
        prototype: HTMLDrtGenericToastElement;
        new (): HTMLDrtGenericToastElement;
    };
    interface HTMLDrtLedgerAccountScreenElementEventMap {
        "selectAccount": any;
        "nextPage": any;
        "prevPage": any;
        "accessWallet": any;
    }
    interface HTMLDrtLedgerAccountScreenElement extends Components.DrtLedgerAccountScreen, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDrtLedgerAccountScreenElementEventMap>(type: K, listener: (this: HTMLDrtLedgerAccountScreenElement, ev: DrtLedgerAccountScreenCustomEvent<HTMLDrtLedgerAccountScreenElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDrtLedgerAccountScreenElementEventMap>(type: K, listener: (this: HTMLDrtLedgerAccountScreenElement, ev: DrtLedgerAccountScreenCustomEvent<HTMLDrtLedgerAccountScreenElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDrtLedgerAccountScreenElement: {
        prototype: HTMLDrtLedgerAccountScreenElement;
        new (): HTMLDrtLedgerAccountScreenElement;
    };
    interface HTMLDrtLedgerConfirmScreenElement extends Components.DrtLedgerConfirmScreen, HTMLStencilElement {
    }
    var HTMLDrtLedgerConfirmScreenElement: {
        prototype: HTMLDrtLedgerConfirmScreenElement;
        new (): HTMLDrtLedgerConfirmScreenElement;
    };
    interface HTMLDrtLedgerConnectElement extends Components.DrtLedgerConnect, HTMLStencilElement {
    }
    var HTMLDrtLedgerConnectElement: {
        prototype: HTMLDrtLedgerConnectElement;
        new (): HTMLDrtLedgerConnectElement;
    };
    interface HTMLDrtLedgerConnectPanelElement extends Components.DrtLedgerConnectPanel, HTMLStencilElement {
    }
    var HTMLDrtLedgerConnectPanelElement: {
        prototype: HTMLDrtLedgerConnectPanelElement;
        new (): HTMLDrtLedgerConnectPanelElement;
    };
    interface HTMLDrtLedgerConnectScreenElementEventMap {
        "connect": any;
    }
    interface HTMLDrtLedgerConnectScreenElement extends Components.DrtLedgerConnectScreen, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDrtLedgerConnectScreenElementEventMap>(type: K, listener: (this: HTMLDrtLedgerConnectScreenElement, ev: DrtLedgerConnectScreenCustomEvent<HTMLDrtLedgerConnectScreenElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDrtLedgerConnectScreenElementEventMap>(type: K, listener: (this: HTMLDrtLedgerConnectScreenElement, ev: DrtLedgerConnectScreenCustomEvent<HTMLDrtLedgerConnectScreenElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDrtLedgerConnectScreenElement: {
        prototype: HTMLDrtLedgerConnectScreenElement;
        new (): HTMLDrtLedgerConnectScreenElement;
    };
    interface HTMLDrtNotificationsFeedElement extends Components.DrtNotificationsFeed, HTMLStencilElement {
    }
    var HTMLDrtNotificationsFeedElement: {
        prototype: HTMLDrtNotificationsFeedElement;
        new (): HTMLDrtNotificationsFeedElement;
    };
    interface HTMLDrtPendingTransactionsPanelElement extends Components.DrtPendingTransactionsPanel, HTMLStencilElement {
    }
    var HTMLDrtPendingTransactionsPanelElement: {
        prototype: HTMLDrtPendingTransactionsPanelElement;
        new (): HTMLDrtPendingTransactionsPanelElement;
    };
    interface HTMLDrtProviderButtonElement extends Components.DrtProviderButton, HTMLStencilElement {
    }
    var HTMLDrtProviderButtonElement: {
        prototype: HTMLDrtProviderButtonElement;
        new (): HTMLDrtProviderButtonElement;
    };
    interface HTMLDrtSidePanelElementEventMap {
        "close": any;
    }
    interface HTMLDrtSidePanelElement extends Components.DrtSidePanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDrtSidePanelElementEventMap>(type: K, listener: (this: HTMLDrtSidePanelElement, ev: DrtSidePanelCustomEvent<HTMLDrtSidePanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDrtSidePanelElementEventMap>(type: K, listener: (this: HTMLDrtSidePanelElement, ev: DrtSidePanelCustomEvent<HTMLDrtSidePanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDrtSidePanelElement: {
        prototype: HTMLDrtSidePanelElement;
        new (): HTMLDrtSidePanelElement;
    };
    interface HTMLDrtSignTransactionComponentElement extends Components.DrtSignTransactionComponent, HTMLStencilElement {
    }
    var HTMLDrtSignTransactionComponentElement: {
        prototype: HTMLDrtSignTransactionComponentElement;
        new (): HTMLDrtSignTransactionComponentElement;
    };
    interface HTMLDrtSignTransactionsPanelElement extends Components.DrtSignTransactionsPanel, HTMLStencilElement {
    }
    var HTMLDrtSignTransactionsPanelElement: {
        prototype: HTMLDrtSignTransactionsPanelElement;
        new (): HTMLDrtSignTransactionsPanelElement;
    };
    interface HTMLDrtSimpleToastElementEventMap {
        "deleteToast": void;
    }
    interface HTMLDrtSimpleToastElement extends Components.DrtSimpleToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDrtSimpleToastElementEventMap>(type: K, listener: (this: HTMLDrtSimpleToastElement, ev: DrtSimpleToastCustomEvent<HTMLDrtSimpleToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDrtSimpleToastElementEventMap>(type: K, listener: (this: HTMLDrtSimpleToastElement, ev: DrtSimpleToastCustomEvent<HTMLDrtSimpleToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDrtSimpleToastElement: {
        prototype: HTMLDrtSimpleToastElement;
        new (): HTMLDrtSimpleToastElement;
    };
    interface HTMLDrtToastListElement extends Components.DrtToastList, HTMLStencilElement {
    }
    var HTMLDrtToastListElement: {
        prototype: HTMLDrtToastListElement;
        new (): HTMLDrtToastListElement;
    };
    interface HTMLDrtTokenComponentElement extends Components.DrtTokenComponent, HTMLStencilElement {
    }
    var HTMLDrtTokenComponentElement: {
        prototype: HTMLDrtTokenComponentElement;
        new (): HTMLDrtTokenComponentElement;
    };
    interface HTMLDrtTransactionAccountElement extends Components.DrtTransactionAccount, HTMLStencilElement {
    }
    var HTMLDrtTransactionAccountElement: {
        prototype: HTMLDrtTransactionAccountElement;
        new (): HTMLDrtTransactionAccountElement;
    };
    interface HTMLDrtTransactionAccountNameElement extends Components.DrtTransactionAccountName, HTMLStencilElement {
    }
    var HTMLDrtTransactionAccountNameElement: {
        prototype: HTMLDrtTransactionAccountNameElement;
        new (): HTMLDrtTransactionAccountNameElement;
    };
    interface HTMLDrtTransactionAgeElement extends Components.DrtTransactionAge, HTMLStencilElement {
    }
    var HTMLDrtTransactionAgeElement: {
        prototype: HTMLDrtTransactionAgeElement;
        new (): HTMLDrtTransactionAgeElement;
    };
    interface HTMLDrtTransactionDirectionBadgeElement extends Components.DrtTransactionDirectionBadge, HTMLStencilElement {
    }
    var HTMLDrtTransactionDirectionBadgeElement: {
        prototype: HTMLDrtTransactionDirectionBadgeElement;
        new (): HTMLDrtTransactionDirectionBadgeElement;
    };
    interface HTMLDrtTransactionFeeComponentElement extends Components.DrtTransactionFeeComponent, HTMLStencilElement {
    }
    var HTMLDrtTransactionFeeComponentElement: {
        prototype: HTMLDrtTransactionFeeComponentElement;
        new (): HTMLDrtTransactionFeeComponentElement;
    };
    interface HTMLDrtTransactionHashElement extends Components.DrtTransactionHash, HTMLStencilElement {
    }
    var HTMLDrtTransactionHashElement: {
        prototype: HTMLDrtTransactionHashElement;
        new (): HTMLDrtTransactionHashElement;
    };
    interface HTMLDrtTransactionIconElement extends Components.DrtTransactionIcon, HTMLStencilElement {
    }
    var HTMLDrtTransactionIconElement: {
        prototype: HTMLDrtTransactionIconElement;
        new (): HTMLDrtTransactionIconElement;
    };
    interface HTMLDrtTransactionListItemElement extends Components.DrtTransactionListItem, HTMLStencilElement {
    }
    var HTMLDrtTransactionListItemElement: {
        prototype: HTMLDrtTransactionListItemElement;
        new (): HTMLDrtTransactionListItemElement;
    };
    interface HTMLDrtTransactionMethodElement extends Components.DrtTransactionMethod, HTMLStencilElement {
    }
    var HTMLDrtTransactionMethodElement: {
        prototype: HTMLDrtTransactionMethodElement;
        new (): HTMLDrtTransactionMethodElement;
    };
    interface HTMLDrtTransactionShardsElement extends Components.DrtTransactionShards, HTMLStencilElement {
    }
    var HTMLDrtTransactionShardsElement: {
        prototype: HTMLDrtTransactionShardsElement;
        new (): HTMLDrtTransactionShardsElement;
    };
    interface HTMLDrtTransactionToastElementEventMap {
        "deleteToast": void;
    }
    interface HTMLDrtTransactionToastElement extends Components.DrtTransactionToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDrtTransactionToastElementEventMap>(type: K, listener: (this: HTMLDrtTransactionToastElement, ev: DrtTransactionToastCustomEvent<HTMLDrtTransactionToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDrtTransactionToastElementEventMap>(type: K, listener: (this: HTMLDrtTransactionToastElement, ev: DrtTransactionToastCustomEvent<HTMLDrtTransactionToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDrtTransactionToastElement: {
        prototype: HTMLDrtTransactionToastElement;
        new (): HTMLDrtTransactionToastElement;
    };
    interface HTMLDrtTransactionToastContentElementEventMap {
        "deleteToast": void;
    }
    interface HTMLDrtTransactionToastContentElement extends Components.DrtTransactionToastContent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDrtTransactionToastContentElementEventMap>(type: K, listener: (this: HTMLDrtTransactionToastContentElement, ev: DrtTransactionToastContentCustomEvent<HTMLDrtTransactionToastContentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDrtTransactionToastContentElementEventMap>(type: K, listener: (this: HTMLDrtTransactionToastContentElement, ev: DrtTransactionToastContentCustomEvent<HTMLDrtTransactionToastContentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDrtTransactionToastContentElement: {
        prototype: HTMLDrtTransactionToastContentElement;
        new (): HTMLDrtTransactionToastContentElement;
    };
    interface HTMLDrtTransactionToastDetailsElement extends Components.DrtTransactionToastDetails, HTMLStencilElement {
    }
    var HTMLDrtTransactionToastDetailsElement: {
        prototype: HTMLDrtTransactionToastDetailsElement;
        new (): HTMLDrtTransactionToastDetailsElement;
    };
    interface HTMLDrtTransactionToastDetailsBodyElement extends Components.DrtTransactionToastDetailsBody, HTMLStencilElement {
    }
    var HTMLDrtTransactionToastDetailsBodyElement: {
        prototype: HTMLDrtTransactionToastDetailsBodyElement;
        new (): HTMLDrtTransactionToastDetailsBodyElement;
    };
    interface HTMLDrtTransactionToastProgressElement extends Components.DrtTransactionToastProgress, HTMLStencilElement {
    }
    var HTMLDrtTransactionToastProgressElement: {
        prototype: HTMLDrtTransactionToastProgressElement;
        new (): HTMLDrtTransactionToastProgressElement;
    };
    interface HTMLDrtTransactionValueElement extends Components.DrtTransactionValue, HTMLStencilElement {
    }
    var HTMLDrtTransactionValueElement: {
        prototype: HTMLDrtTransactionValueElement;
        new (): HTMLDrtTransactionValueElement;
    };
    interface HTMLDrtTransactionsTableElement extends Components.DrtTransactionsTable, HTMLStencilElement {
    }
    var HTMLDrtTransactionsTableElement: {
        prototype: HTMLDrtTransactionsTableElement;
        new (): HTMLDrtTransactionsTableElement;
    };
    interface HTMLDrtTrimTextElement extends Components.DrtTrimText, HTMLStencilElement {
    }
    var HTMLDrtTrimTextElement: {
        prototype: HTMLDrtTrimTextElement;
        new (): HTMLDrtTrimTextElement;
    };
    interface HTMLDrtUnlockButtonElement extends Components.DrtUnlockButton, HTMLStencilElement {
    }
    var HTMLDrtUnlockButtonElement: {
        prototype: HTMLDrtUnlockButtonElement;
        new (): HTMLDrtUnlockButtonElement;
    };
    interface HTMLDrtUnlockHeaderElementEventMap {
        "back": void;
        "close": void;
    }
    interface HTMLDrtUnlockHeaderElement extends Components.DrtUnlockHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDrtUnlockHeaderElementEventMap>(type: K, listener: (this: HTMLDrtUnlockHeaderElement, ev: DrtUnlockHeaderCustomEvent<HTMLDrtUnlockHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDrtUnlockHeaderElementEventMap>(type: K, listener: (this: HTMLDrtUnlockHeaderElement, ev: DrtUnlockHeaderCustomEvent<HTMLDrtUnlockHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDrtUnlockHeaderElement: {
        prototype: HTMLDrtUnlockHeaderElement;
        new (): HTMLDrtUnlockHeaderElement;
    };
    interface HTMLDrtUnlockPanelElementEventMap {
        "close": any;
        "login": { provider: ProviderTypeEnum; anchor?: HTMLElement };
    }
    interface HTMLDrtUnlockPanelElement extends Components.DrtUnlockPanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDrtUnlockPanelElementEventMap>(type: K, listener: (this: HTMLDrtUnlockPanelElement, ev: DrtUnlockPanelCustomEvent<HTMLDrtUnlockPanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDrtUnlockPanelElementEventMap>(type: K, listener: (this: HTMLDrtUnlockPanelElement, ev: DrtUnlockPanelCustomEvent<HTMLDrtUnlockPanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDrtUnlockPanelElement: {
        prototype: HTMLDrtUnlockPanelElement;
        new (): HTMLDrtUnlockPanelElement;
    };
    interface HTMLDrtWalletConnectElement extends Components.DrtWalletConnect, HTMLStencilElement {
    }
    var HTMLDrtWalletConnectElement: {
        prototype: HTMLDrtWalletConnectElement;
        new (): HTMLDrtWalletConnectElement;
    };
    interface HTMLDrtWalletConnectBodyElement extends Components.DrtWalletConnectBody, HTMLStencilElement {
    }
    var HTMLDrtWalletConnectBodyElement: {
        prototype: HTMLDrtWalletConnectBodyElement;
        new (): HTMLDrtWalletConnectBodyElement;
    };
    interface HTMLDrtWalletConnectPanelElement extends Components.DrtWalletConnectPanel, HTMLStencilElement {
    }
    var HTMLDrtWalletConnectPanelElement: {
        prototype: HTMLDrtWalletConnectPanelElement;
        new (): HTMLDrtWalletConnectPanelElement;
    };
    interface HTMLElementTagNameMap {
        "drt-balance-component": HTMLDrtBalanceComponentElement;
        "drt-copy-button": HTMLDrtCopyButtonElement;
        "drt-custom-toast": HTMLDrtCustomToastElement;
        "drt-explorer-link": HTMLDrtExplorerLinkElement;
        "drt-fa-icon": HTMLDrtFaIconElement;
        "drt-format-amount": HTMLDrtFormatAmountElement;
        "drt-fungible-component": HTMLDrtFungibleComponentElement;
        "drt-generic-modal": HTMLDrtGenericModalElement;
        "drt-generic-spinner": HTMLDrtGenericSpinnerElement;
        "drt-generic-toast": HTMLDrtGenericToastElement;
        "drt-ledger-account-screen": HTMLDrtLedgerAccountScreenElement;
        "drt-ledger-confirm-screen": HTMLDrtLedgerConfirmScreenElement;
        "drt-ledger-connect": HTMLDrtLedgerConnectElement;
        "drt-ledger-connect-panel": HTMLDrtLedgerConnectPanelElement;
        "drt-ledger-connect-screen": HTMLDrtLedgerConnectScreenElement;
        "drt-notifications-feed": HTMLDrtNotificationsFeedElement;
        "drt-pending-transactions-panel": HTMLDrtPendingTransactionsPanelElement;
        "drt-provider-button": HTMLDrtProviderButtonElement;
        "drt-side-panel": HTMLDrtSidePanelElement;
        "drt-sign-transaction-component": HTMLDrtSignTransactionComponentElement;
        "drt-sign-transactions-panel": HTMLDrtSignTransactionsPanelElement;
        "drt-simple-toast": HTMLDrtSimpleToastElement;
        "drt-toast-list": HTMLDrtToastListElement;
        "drt-token-component": HTMLDrtTokenComponentElement;
        "drt-transaction-account": HTMLDrtTransactionAccountElement;
        "drt-transaction-account-name": HTMLDrtTransactionAccountNameElement;
        "drt-transaction-age": HTMLDrtTransactionAgeElement;
        "drt-transaction-direction-badge": HTMLDrtTransactionDirectionBadgeElement;
        "drt-transaction-fee-component": HTMLDrtTransactionFeeComponentElement;
        "drt-transaction-hash": HTMLDrtTransactionHashElement;
        "drt-transaction-icon": HTMLDrtTransactionIconElement;
        "drt-transaction-list-item": HTMLDrtTransactionListItemElement;
        "drt-transaction-method": HTMLDrtTransactionMethodElement;
        "drt-transaction-shards": HTMLDrtTransactionShardsElement;
        "drt-transaction-toast": HTMLDrtTransactionToastElement;
        "drt-transaction-toast-content": HTMLDrtTransactionToastContentElement;
        "drt-transaction-toast-details": HTMLDrtTransactionToastDetailsElement;
        "drt-transaction-toast-details-body": HTMLDrtTransactionToastDetailsBodyElement;
        "drt-transaction-toast-progress": HTMLDrtTransactionToastProgressElement;
        "drt-transaction-value": HTMLDrtTransactionValueElement;
        "drt-transactions-table": HTMLDrtTransactionsTableElement;
        "drt-trim-text": HTMLDrtTrimTextElement;
        "drt-unlock-button": HTMLDrtUnlockButtonElement;
        "drt-unlock-header": HTMLDrtUnlockHeaderElement;
        "drt-unlock-panel": HTMLDrtUnlockPanelElement;
        "drt-wallet-connect": HTMLDrtWalletConnectElement;
        "drt-wallet-connect-body": HTMLDrtWalletConnectBodyElement;
        "drt-wallet-connect-panel": HTMLDrtWalletConnectPanelElement;
    }
}
declare namespace LocalJSX {
    interface DrtBalanceComponent {
        "amount"?: string;
        "header"?: string;
        "ticker"?: string;
        "usdValue"?: string;
    }
    interface DrtCopyButton {
        "class"?: string;
        "copyIcon"?: IconDefinition;
        "iconClass"?: string;
        "successIcon"?: IconDefinition;
        "text"?: string;
    }
    interface DrtCustomToast {
        "onDeleteToast"?: (event: DrtCustomToastCustomEvent<string>) => void;
        "toast"?: IComponentToast;
    }
    interface DrtExplorerLink {
        "class"?: string;
        "dataTestId"?: string;
        "icon"?: IconDefinition;
        "iconClass"?: string;
        "link"?: string;
        "text"?: string;
    }
    interface DrtFaIcon {
        "class"?: string;
        "description"?: string;
        "icon"?: IconDefinition | string;
    }
    interface DrtFormatAmount {
        "class"?: string;
        "dataTestId"?: string;
        "isValid"?: boolean;
        "label"?: string;
        "labelClass"?: string;
        "showLabel"?: boolean;
        "valueDecimal"?: string;
        "valueInteger"?: string;
    }
    interface DrtFungibleComponent {
    }
    interface DrtGenericModal {
        "body"?: IGenericModalProps['body'];
        "modalSubtitle"?: IGenericModalProps['modalSubtitle'];
        "modalTitle"?: IGenericModalProps['modalTitle'];
        "onClose"?: (event: DrtGenericModalCustomEvent<any>) => void;
    }
    interface DrtGenericSpinner {
    }
    interface DrtGenericToast {
        "onDeleteToast"?: (event: DrtGenericToastCustomEvent<string>) => void;
        "toast"?: CustomToastType;
    }
    interface DrtLedgerAccountScreen {
        "accountScreenData"?: IAccountScreenData;
        "onAccessWallet"?: (event: DrtLedgerAccountScreenCustomEvent<any>) => void;
        "onNextPage"?: (event: DrtLedgerAccountScreenCustomEvent<any>) => void;
        "onPrevPage"?: (event: DrtLedgerAccountScreenCustomEvent<any>) => void;
        "onSelectAccount"?: (event: DrtLedgerAccountScreenCustomEvent<any>) => void;
        "selectedIndex"?: number;
    }
    interface DrtLedgerConfirmScreen {
        "confirmScreenData"?: IConfirmScreenData;
    }
    interface DrtLedgerConnect {
        "data"?: ILedgerConnectPanelData;
    }
    interface DrtLedgerConnectPanel {
        "data"?: ILedgerConnectPanelData;
    }
    interface DrtLedgerConnectScreen {
        "connectScreenData"?: IConnectScreenData;
        "onConnect"?: (event: DrtLedgerConnectScreenCustomEvent<any>) => void;
    }
    interface DrtNotificationsFeed {
    }
    interface DrtPendingTransactionsPanel {
        "data"?: IPendingTransactionsPanelData;
    }
    interface DrtProviderButton {
        "type"?: ProviderTypeEnum;
    }
    interface DrtSidePanel {
        "isOpen"?: boolean;
        "onClose"?: (event: DrtSidePanelCustomEvent<any>) => void;
        "panelClassName"?: string;
        "side"?: SidePanelSideEnum;
    }
    interface DrtSignTransactionComponent {
        "header"?: VNode;
    }
    interface DrtSignTransactionsPanel {
        "data"?: ISignTransactionsPanelData;
    }
    interface DrtSimpleToast {
        "onDeleteToast"?: (event: DrtSimpleToastCustomEvent<void>) => void;
        "toast"?: ISimpleToast;
    }
    interface DrtToastList {
        "customToasts"?: CustomToastType1[];
        "transactionToasts"?: ITransactionToast[];
    }
    interface DrtTokenComponent {
    }
    interface DrtTransactionAccount {
        "account"?: ITransactionAccount;
        "class"?: string;
        "dataTestId"?: string;
        "scope"?: 'receiver' | 'sender';
        "showLockedAccounts"?: boolean;
    }
    interface DrtTransactionAccountName {
        "address"?: string;
        "class"?: string;
        "dataTestId"?: string;
        "description"?: string;
        "name"?: string;
    }
    interface DrtTransactionAge {
        "age"?: string;
        "class"?: string;
        "tooltip"?: string;
    }
    interface DrtTransactionDirectionBadge {
        "class"?: string;
        "direction"?: string;
    }
    interface DrtTransactionFeeComponent {
    }
    interface DrtTransactionHash {
        "class"?: string;
        "transaction"?: ITransactionsTableRow;
    }
    interface DrtTransactionIcon {
        "class"?: string;
        "iconInfo"?: ITransactionIconInfo;
    }
    interface DrtTransactionListItem {
        "transaction"?: ITransactionListItem;
    }
    interface DrtTransactionMethod {
        "actionDescription"?: string;
        "class"?: string;
        "method"?: string;
    }
    interface DrtTransactionShards {
        "class"?: string;
        "transaction"?: ITransactionsTableRow;
    }
    interface DrtTransactionToast {
        "fullWidth"?: boolean;
        "onDeleteToast"?: (event: DrtTransactionToastCustomEvent<void>) => void;
        "processedTransactionsStatus"?: string | JSX.Element;
        "toastDataState"?: IToastDataState;
        "toastId"?: string;
        "transactionProgressState"?: ITransactionProgressState;
        "transactions"?: ITransactionListItem[];
        "wrapperClass"?: string;
    }
    interface DrtTransactionToastContent {
        "fullWidth"?: boolean;
        "onDeleteToast"?: (event: DrtTransactionToastContentCustomEvent<void>) => void;
        "processedTransactionsStatus"?: string | JSX.Element;
        "toastDataState"?: IToastDataState;
        "transactions"?: ITransactionListItem[];
    }
    interface DrtTransactionToastDetails {
        "maxShownTransactions"?: number;
        "processedTransactionsStatus"?: string | JSX.Element;
        "transactionClass"?: string;
        "transactions"?: ITransactionListItem[];
    }
    interface DrtTransactionToastDetailsBody {
        "hash"?: string;
        "index"?: string;
        "link"?: string;
        "status"?: string;
        "transactionClass"?: string;
    }
    interface DrtTransactionToastProgress {
        "endTime"?: number;
        "startTime"?: number;
    }
    interface DrtTransactionValue {
        "class"?: string;
        "value"?: ITransactionValue;
    }
    interface DrtTransactionsTable {
        "class"?: string;
        "transactions"?: ITransactionsTableRow[];
    }
    interface DrtTrimText {
        "class"?: string;
        "dataTestId"?: string;
        "text"?: string;
    }
    interface DrtUnlockButton {
        "icon"?: HTMLElement;
        "label"?: string;
    }
    interface DrtUnlockHeader {
        "backIcon"?: IconDefinition;
        "closeIcon"?: IconDefinition;
        "onBack"?: (event: DrtUnlockHeaderCustomEvent<void>) => void;
        "onClose"?: (event: DrtUnlockHeaderCustomEvent<void>) => void;
        "text"?: string;
    }
    interface DrtUnlockPanel {
        "allowedProviders"?: ProviderTypeEnum[];
        "isOpen"?: boolean;
        "onClose"?: (event: DrtUnlockPanelCustomEvent<any>) => void;
        "onLogin"?: (event: DrtUnlockPanelCustomEvent<{ provider: ProviderTypeEnum; anchor?: HTMLElement }>) => void;
    }
    interface DrtWalletConnect {
        "data"?: IWalletConnectPanelData;
    }
    interface DrtWalletConnectBody {
        "description"?: string;
        "qrCodeSvg"?: string;
    }
    interface DrtWalletConnectPanel {
        "data"?: IWalletConnectPanelData;
    }
    interface IntrinsicElements {
        "drt-balance-component": DrtBalanceComponent;
        "drt-copy-button": DrtCopyButton;
        "drt-custom-toast": DrtCustomToast;
        "drt-explorer-link": DrtExplorerLink;
        "drt-fa-icon": DrtFaIcon;
        "drt-format-amount": DrtFormatAmount;
        "drt-fungible-component": DrtFungibleComponent;
        "drt-generic-modal": DrtGenericModal;
        "drt-generic-spinner": DrtGenericSpinner;
        "drt-generic-toast": DrtGenericToast;
        "drt-ledger-account-screen": DrtLedgerAccountScreen;
        "drt-ledger-confirm-screen": DrtLedgerConfirmScreen;
        "drt-ledger-connect": DrtLedgerConnect;
        "drt-ledger-connect-panel": DrtLedgerConnectPanel;
        "drt-ledger-connect-screen": DrtLedgerConnectScreen;
        "drt-notifications-feed": DrtNotificationsFeed;
        "drt-pending-transactions-panel": DrtPendingTransactionsPanel;
        "drt-provider-button": DrtProviderButton;
        "drt-side-panel": DrtSidePanel;
        "drt-sign-transaction-component": DrtSignTransactionComponent;
        "drt-sign-transactions-panel": DrtSignTransactionsPanel;
        "drt-simple-toast": DrtSimpleToast;
        "drt-toast-list": DrtToastList;
        "drt-token-component": DrtTokenComponent;
        "drt-transaction-account": DrtTransactionAccount;
        "drt-transaction-account-name": DrtTransactionAccountName;
        "drt-transaction-age": DrtTransactionAge;
        "drt-transaction-direction-badge": DrtTransactionDirectionBadge;
        "drt-transaction-fee-component": DrtTransactionFeeComponent;
        "drt-transaction-hash": DrtTransactionHash;
        "drt-transaction-icon": DrtTransactionIcon;
        "drt-transaction-list-item": DrtTransactionListItem;
        "drt-transaction-method": DrtTransactionMethod;
        "drt-transaction-shards": DrtTransactionShards;
        "drt-transaction-toast": DrtTransactionToast;
        "drt-transaction-toast-content": DrtTransactionToastContent;
        "drt-transaction-toast-details": DrtTransactionToastDetails;
        "drt-transaction-toast-details-body": DrtTransactionToastDetailsBody;
        "drt-transaction-toast-progress": DrtTransactionToastProgress;
        "drt-transaction-value": DrtTransactionValue;
        "drt-transactions-table": DrtTransactionsTable;
        "drt-trim-text": DrtTrimText;
        "drt-unlock-button": DrtUnlockButton;
        "drt-unlock-header": DrtUnlockHeader;
        "drt-unlock-panel": DrtUnlockPanel;
        "drt-wallet-connect": DrtWalletConnect;
        "drt-wallet-connect-body": DrtWalletConnectBody;
        "drt-wallet-connect-panel": DrtWalletConnectPanel;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "drt-balance-component": LocalJSX.DrtBalanceComponent & JSXBase.HTMLAttributes<HTMLDrtBalanceComponentElement>;
            "drt-copy-button": LocalJSX.DrtCopyButton & JSXBase.HTMLAttributes<HTMLDrtCopyButtonElement>;
            "drt-custom-toast": LocalJSX.DrtCustomToast & JSXBase.HTMLAttributes<HTMLDrtCustomToastElement>;
            "drt-explorer-link": LocalJSX.DrtExplorerLink & JSXBase.HTMLAttributes<HTMLDrtExplorerLinkElement>;
            "drt-fa-icon": LocalJSX.DrtFaIcon & JSXBase.HTMLAttributes<HTMLDrtFaIconElement>;
            "drt-format-amount": LocalJSX.DrtFormatAmount & JSXBase.HTMLAttributes<HTMLDrtFormatAmountElement>;
            "drt-fungible-component": LocalJSX.DrtFungibleComponent & JSXBase.HTMLAttributes<HTMLDrtFungibleComponentElement>;
            "drt-generic-modal": LocalJSX.DrtGenericModal & JSXBase.HTMLAttributes<HTMLDrtGenericModalElement>;
            "drt-generic-spinner": LocalJSX.DrtGenericSpinner & JSXBase.HTMLAttributes<HTMLDrtGenericSpinnerElement>;
            "drt-generic-toast": LocalJSX.DrtGenericToast & JSXBase.HTMLAttributes<HTMLDrtGenericToastElement>;
            "drt-ledger-account-screen": LocalJSX.DrtLedgerAccountScreen & JSXBase.HTMLAttributes<HTMLDrtLedgerAccountScreenElement>;
            "drt-ledger-confirm-screen": LocalJSX.DrtLedgerConfirmScreen & JSXBase.HTMLAttributes<HTMLDrtLedgerConfirmScreenElement>;
            "drt-ledger-connect": LocalJSX.DrtLedgerConnect & JSXBase.HTMLAttributes<HTMLDrtLedgerConnectElement>;
            "drt-ledger-connect-panel": LocalJSX.DrtLedgerConnectPanel & JSXBase.HTMLAttributes<HTMLDrtLedgerConnectPanelElement>;
            "drt-ledger-connect-screen": LocalJSX.DrtLedgerConnectScreen & JSXBase.HTMLAttributes<HTMLDrtLedgerConnectScreenElement>;
            "drt-notifications-feed": LocalJSX.DrtNotificationsFeed & JSXBase.HTMLAttributes<HTMLDrtNotificationsFeedElement>;
            "drt-pending-transactions-panel": LocalJSX.DrtPendingTransactionsPanel & JSXBase.HTMLAttributes<HTMLDrtPendingTransactionsPanelElement>;
            "drt-provider-button": LocalJSX.DrtProviderButton & JSXBase.HTMLAttributes<HTMLDrtProviderButtonElement>;
            "drt-side-panel": LocalJSX.DrtSidePanel & JSXBase.HTMLAttributes<HTMLDrtSidePanelElement>;
            "drt-sign-transaction-component": LocalJSX.DrtSignTransactionComponent & JSXBase.HTMLAttributes<HTMLDrtSignTransactionComponentElement>;
            "drt-sign-transactions-panel": LocalJSX.DrtSignTransactionsPanel & JSXBase.HTMLAttributes<HTMLDrtSignTransactionsPanelElement>;
            "drt-simple-toast": LocalJSX.DrtSimpleToast & JSXBase.HTMLAttributes<HTMLDrtSimpleToastElement>;
            "drt-toast-list": LocalJSX.DrtToastList & JSXBase.HTMLAttributes<HTMLDrtToastListElement>;
            "drt-token-component": LocalJSX.DrtTokenComponent & JSXBase.HTMLAttributes<HTMLDrtTokenComponentElement>;
            "drt-transaction-account": LocalJSX.DrtTransactionAccount & JSXBase.HTMLAttributes<HTMLDrtTransactionAccountElement>;
            "drt-transaction-account-name": LocalJSX.DrtTransactionAccountName & JSXBase.HTMLAttributes<HTMLDrtTransactionAccountNameElement>;
            "drt-transaction-age": LocalJSX.DrtTransactionAge & JSXBase.HTMLAttributes<HTMLDrtTransactionAgeElement>;
            "drt-transaction-direction-badge": LocalJSX.DrtTransactionDirectionBadge & JSXBase.HTMLAttributes<HTMLDrtTransactionDirectionBadgeElement>;
            "drt-transaction-fee-component": LocalJSX.DrtTransactionFeeComponent & JSXBase.HTMLAttributes<HTMLDrtTransactionFeeComponentElement>;
            "drt-transaction-hash": LocalJSX.DrtTransactionHash & JSXBase.HTMLAttributes<HTMLDrtTransactionHashElement>;
            "drt-transaction-icon": LocalJSX.DrtTransactionIcon & JSXBase.HTMLAttributes<HTMLDrtTransactionIconElement>;
            "drt-transaction-list-item": LocalJSX.DrtTransactionListItem & JSXBase.HTMLAttributes<HTMLDrtTransactionListItemElement>;
            "drt-transaction-method": LocalJSX.DrtTransactionMethod & JSXBase.HTMLAttributes<HTMLDrtTransactionMethodElement>;
            "drt-transaction-shards": LocalJSX.DrtTransactionShards & JSXBase.HTMLAttributes<HTMLDrtTransactionShardsElement>;
            "drt-transaction-toast": LocalJSX.DrtTransactionToast & JSXBase.HTMLAttributes<HTMLDrtTransactionToastElement>;
            "drt-transaction-toast-content": LocalJSX.DrtTransactionToastContent & JSXBase.HTMLAttributes<HTMLDrtTransactionToastContentElement>;
            "drt-transaction-toast-details": LocalJSX.DrtTransactionToastDetails & JSXBase.HTMLAttributes<HTMLDrtTransactionToastDetailsElement>;
            "drt-transaction-toast-details-body": LocalJSX.DrtTransactionToastDetailsBody & JSXBase.HTMLAttributes<HTMLDrtTransactionToastDetailsBodyElement>;
            "drt-transaction-toast-progress": LocalJSX.DrtTransactionToastProgress & JSXBase.HTMLAttributes<HTMLDrtTransactionToastProgressElement>;
            "drt-transaction-value": LocalJSX.DrtTransactionValue & JSXBase.HTMLAttributes<HTMLDrtTransactionValueElement>;
            "drt-transactions-table": LocalJSX.DrtTransactionsTable & JSXBase.HTMLAttributes<HTMLDrtTransactionsTableElement>;
            "drt-trim-text": LocalJSX.DrtTrimText & JSXBase.HTMLAttributes<HTMLDrtTrimTextElement>;
            "drt-unlock-button": LocalJSX.DrtUnlockButton & JSXBase.HTMLAttributes<HTMLDrtUnlockButtonElement>;
            "drt-unlock-header": LocalJSX.DrtUnlockHeader & JSXBase.HTMLAttributes<HTMLDrtUnlockHeaderElement>;
            "drt-unlock-panel": LocalJSX.DrtUnlockPanel & JSXBase.HTMLAttributes<HTMLDrtUnlockPanelElement>;
            "drt-wallet-connect": LocalJSX.DrtWalletConnect & JSXBase.HTMLAttributes<HTMLDrtWalletConnectElement>;
            "drt-wallet-connect-body": LocalJSX.DrtWalletConnectBody & JSXBase.HTMLAttributes<HTMLDrtWalletConnectBodyElement>;
            "drt-wallet-connect-panel": LocalJSX.DrtWalletConnectPanel & JSXBase.HTMLAttributes<HTMLDrtWalletConnectPanelElement>;
        }
    }
}
